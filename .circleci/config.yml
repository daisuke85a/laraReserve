# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.1-apache-node-browsers # The primary container where steps are run
      - image: circleci/mysql:8.0.4
        command: [--default-authentication-plugin=mysql_native_password]
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd

    branches:
        only:
          - test/circleci 

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      - run:
      # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      - run:
          name: Install PHP extensions
          command: |
            sudo docker-php-ext-install pdo_mysql
            sudo docker-php-ext-enable pdo_mysql

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "./laraReserve/composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: 
         name: composer install -n --prefer-dist
         command: |
          cd laraReserve
          composer install -n --prefer-dist 

      - save_cache:
          key: v1-dependencies-{{ checksum "./laraReserve/composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "./laraReserve/package.json" }}
            - node-v1-
      #- run: yarn install
      #- save_cache:
      #    key: node-v1-{{ checksum "package.json" }}
      #    paths:
      #     - node_modules

      # prepare the database
      - run:
         name: php artisan migrate --env=testing --force
         command: |
          cd laraReserve
          php artisan migrate --env=testing --force
      # run tests with phpunit or codecept
      - run: 
         name: ./vendor/bin/phpunit
         command: |
          cd laraReserve
          php vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run